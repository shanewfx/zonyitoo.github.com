<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Manual - Zonyitoo's Blog]]></title>
  <link href="http://zonyitoo.github.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://zonyitoo.github.com/"/>
  <updated>2012-04-15T22:21:12+08:00</updated>
  <id>http://zonyitoo.github.com/</id>
  <author>
    <name><![CDATA[Yutang Chung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android与服务器进行通信的问题]]></title>
    <link href="http://zonyitoo.github.com/blog/2012/04/14/androidyu-fu-wu-qi-jin-xing-tong-xin-de-wen-ti/"/>
    <updated>2012-04-14T20:08:00+08:00</updated>
    <id>http://zonyitoo.github.com/blog/2012/04/14/androidyu-fu-wu-qi-jin-xing-tong-xin-de-wen-ti</id>
    <content type="html"><![CDATA[<p>最近没有什么比较有趣而又有挑战性的项目在手，只好继续在<strong>WHJ</strong>老师的实验室里面准备搞ARM开发，唯一期待的就是准备筹建的参加全国大赛的机器人队，希望到时去面试能进！我正在怀疑我当时是不是应该选电子系而不是计算机系，毕竟现在表现得就像对底层的兴趣高于对前台开发或软件开发的兴趣。</p>

<p>题外话说多了，入正题，这次探讨的是Android与Django架构服务器之间通信中遇到的问题及我的解决方法</p>

<h2>应答字符串为JSON格式时，字符串两端会自动加上一个双引号</h2>

<p>这个题目很奇怪，让人看起来不知道是在讲什么，我们来看一个实际例子</p>

<ul>
<li><p>手机这边向服务器请求用户登录，发送JSON字符串为</p>

<blockquote><p>{\"user_name\": user_name, \"user_password\": user_password}</p></blockquote></li>
<li><p>服务器端收到的JSON字符串为</p>

<blockquote><p>\"{\"user_name\": user_name, \"user_password\": user_password}\"</p></blockquote></li>
</ul>


<p>反之亦然。</p>

<p>发现不同了么？对了，就是左右两端多了个引号。这个BUG非常隐秘，这两个符号足足困扰了我三天才注意到它多了这么两个符号，导致整个字符串从一个JSONObject变成了一个String类型，直接写入JSONObject的构造函数会抛出JSONException</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>解决方法  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">responseStr</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">getResponse</span><span class="o">();</span>
</span><span class='line'><span class="n">JSONTokener</span> <span class="n">tokener</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONTokener</span><span class="o">(</span><span class="n">responseStr</span><span class="o">);</span>
</span><span class='line'><span class="n">JSONObject</span> <span class="n">jsonobj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">tokener</span><span class="o">.</span><span class="na">nextValue</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>当然，看到这里一般来说都会想到，直接用substring取出中间那段字符不就行了么？是的，我刚开始也是这样想的，问题是不行，JSONObject的构造函数同样会解释错误，只有这样才是对的...</p>

<p>但是，在服务器端用Python的substring却可以...非常怪异。</p>

<h2>发送密码用Base64加密的问题</h2>

<p>Android自身带有Base64加密与解密的包，可以方便地加密密码方便传输。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>加密所用的代码为  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">res</span> <span class="o">=</span> <span class="o">...</span>
</span><span class='line'><span class="n">String</span> <span class="n">encode_str</span> <span class="o">=</span> <span class="n">Base64</span><span class="o">.</span><span class="na">encodeToString</span><span class="o">(</span><span class="n">res</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span> <span class="n">Base64</span><span class="o">.</span><span class="na">DEFAULT</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>看起来用法与Java所带的sun.misc的Base64Encoder这些用法差不多，但应该留意到了，在encode的时候，会有一个参数Flags（即上面代码中的Base64.DEFAULT）</p>

<p>这个参数有什么用呢？根据Android SDK的描述，这种参数有5个：</p>

<blockquote><ol>
<li><p>CRLF       这个参数看起来比较眼熟，它就是Win风格的换行符，意思就是使用CR LF这一对作为一行的结尾而不是Unix风格的LF</p></li>
<li><p>DEFAULT    这个参数是默认，使用默认的方法来加密</p></li>
<li><p>NO_PADDING 这个参数是略去加密字符串最后的"="</p></li>
<li><p>NO_WRAP    这个参数意思是略去所有的换行符（设置后CRLF就没用了）</p></li>
<li><p>URL_SAFE   这个参数意思是加密时不使用对URL和文件名有特殊意义的字符来作为加密字符，具体就是以-和_取代+和/</p></li>
</ol>
</blockquote>

<p>若用<code>Base64.DEFAULT</code>发送服务器不能识别，则应该选用<code>Base64.NO_WRAP | Baser64.URL_SAFE</code>来加密</p>

<blockquote><p>例如原字符串为：[B@405693a8</p>

<p>用DEFAULT加密后为：4Mgw681Pi3HFfCidsH/0XZ6Mc9g=</p>

<p>用NO_WRAP | URL_SAFE加密后为：j3cM68c4ageVk8x4_CS5qrU1D_E=</p></blockquote>

<p>由上面例子可以清楚见到，DEFAULT加密方式出现了/这个URL中会比较敏感的字符，而下面的方法加密则不会出现</p>
]]></content>
  </entry>
  
</feed>
